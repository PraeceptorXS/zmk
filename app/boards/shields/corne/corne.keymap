/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define COMBO_TIMEOUT 60
#define FAST_COMBO_TIMEOUT 30
#define VERY_FAST_COMBO_TIMEOUT 20

// Cleaning up long code segments
#define COMBO(NAME, KEYS, MAPPING, LAYERS, DELAY) combo_ ## NAME { \
            timeout-ms = <DELAY>; \
            key-positions = <KEYS>; \
            bindings = <MAPPING>; \
            layers = <LAYERS>; \
        };

#define MOD_MORPH(NAME, KEY1, KEY2, MODS) NAME: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = # NAME; \
            #binding-cells = <0>; \
            bindings = <KEY1>, <KEY2>; \
            mods = MODS; \
        };
#define LRSFT <(MOD_LSFT|MOD_RSFT)>

#define MACRO(NAME, ...) ZMK_MACRO(NAME, \
  wait-ms = <10>; \
  tap-ms = <10>; \
  bindings = __VA_ARGS__;)
#define PRESS(KEY) <&macro_press KEY>
#define RELEASE(KEY) <&macro_release KEY>
#define TAP(KEY) <&macro_tap KEY>
#define CAPS_LAYER(STR_NAME, SPACE_KEY, LAYER_NUM) layer_ ## LAYER_NUM { \
      label = STR_NAME;\
      bindings = <\
        &kp Q &kp W &kp F &kp P &kp B  &kp J &kp L &kp U &kp Y &kp SQT     \
        &kp A &kp R &kp S &kp T &kp G  &kp M &kp N &kp E &kp I &kp O \
        &kp Z &kp X &kp C &kp D &kp V  &kp K &kp H &kp COMMA  &kp DOT  &kp FSLH    \
        &tog LAYER_NUM &lt LOWER TAB &kp BKSP SPACE_KEY &lt RAISE SEMI &mt RSFT RET\
      >;\
    };
// layers
#define MAC   0
#define WIN   1
#define SNAKE 2
#define CAMEL 3
#define PATH  4
#define KEBAB 5
#define LOWER 6
#define RAISE 7
#define FUNCT 8
#define GAME  9

&mt {
  compatible = "zmk,behavior-hold-tap";
  tapping-term-ms = <100>;
  quick_tap_ms = <200>;
  flavor = "balanced";
};

&lt {
  compatible = "zmk,behavior-hold-tap";
  tapping-term-ms = <110>;
  quick_tap_ms = <200>;
  flavor = "balanced";
};

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <FUNCT>;
        };
    };
    behaviors {
      MOD_MORPH(end_snr, &kp END, &snap_right, LRSFT)
      MOD_MORPH(home_snl, &kp HOME, &snap_left, LRSFT)
      MOD_MORPH(eq_eeq, &kp EQUAL, &eq_eq, LRSFT)
      MOD_MORPH(excl_neq, &kp EXCL, &neq, LRSFT)
      MOD_MORPH(minus_d, &kp MINUS, &min_min, LRSFT)
      MOD_MORPH(plus_d, &kp PLUS, &plus_plus, LRSFT)
      MOD_MORPH(gte_rarr, &gte, &rarr, LRSFT)
      MOD_MORPH(peq_meq, &peq, &neq, LRSFT)
      MOD_MORPH(col_dcol, &kp COLON, &col_col, LRSFT)
      MOD_MORPH(pipe_or, &kp PIPE, &or_or, LRSFT)
      MOD_MORPH(amps_and, &kp AMPS, &and_and, LRSFT)
      MOD_MORPH(snake_kebab, &tog SNAKE, &tog KEBAB, LRSFT)
      MOD_MORPH(camel_path, &tog CAMEL, &tog PATH, LRSFT)
      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <160>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
      };
    };
};
/ {
    macros {
      MACRO(snap_left,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        PRESS(&kp LALT),
        PRESS(&kp LGUI),
        TAP(&kp LEFT),
        RELEASE(&kp LALT),
        RELEASE(&kp LGUI)
      )
      MACRO(snap_right,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        PRESS(&kp LALT),
        PRESS(&kp LGUI),
        TAP(&kp RIGHT),
        RELEASE(&kp LALT),
        RELEASE(&kp LGUI)
      )
      MACRO(desktop_left,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        PRESS(&kp LCTRL),
        TAP(&kp LEFT),
        RELEASE(&kp LCTRL)  
      )
      MACRO(desktop_right,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        PRESS(&kp LCTRL),
        TAP(&kp RIGHT),
        RELEASE(&kp LCTRL) 
      )
      MACRO(lte,
        TAP(&kp LT),
        TAP(&kp EQUAL)
      )
      MACRO(rptr,
        RELEASE(&kp LSFT),
        TAP(&kp MINUS),
        TAP(&kp GT)
      )
      MACRO(gte,
        TAP(&kp GT),
        TAP(&kp EQUAL)
      )
      MACRO(neq,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        TAP(&kp EXCL),
        TAP(&kp EQUAL)
      )
      MACRO(peq,
        TAP(&kp PLUS),
        TAP(&kp EQUAL)
      )
      MACRO(meq,
        RELEASE(&kp LSHFT),
        RELEASE(&kp RSHFT),
        TAP(&kp MINUS),
        TAP(&kp EQUAL)
      )
      MACRO(trip_quote, 
        TAP(&kp DQT),
        TAP(&kp DQT),
        TAP(&kp DQT)
      )
      MACRO(plus_plus,
        TAP(&kp PLUS),
        TAP(&kp PLUS)
      )
      MACRO(min_min,
        RELEASE(&kp LSFT),
        RELEASE(&kp RSFT),
        TAP(&kp MINUS),
        TAP(&kp MINUS)
      )
      MACRO(and_and,
        TAP(&kp AMPS),
        TAP(&kp AMPS)
      )
      MACRO(or_or,
        TAP(&kp PIPE),
        TAP(&kp PIPE)
      )
      MACRO(col_col,
        TAP(&kp COLON),
        TAP(&kp COLON)
      )
      MACRO(eq_eq,
        RELEASE(&kp LSFT),
        RELEASE(&kp RSFT),
        TAP(&kp EQUAL),
        TAP(&kp EQUAL)
      )
      MACRO(rarr,
        RELEASE(&kp LSFT),
        RELEASE(&kp RSFT),
        TAP(&kp EQUAL),
        TAP(&kp GT)
      )
      // Device switching macros
      MACRO(to_mac1,
        TAP(&to MAC),
        TAP(&bt BT_SEL 0)
      )
      MACRO(to_win,
        TAP(&to WIN),
        TAP(&bt BT_SEL 1)
      )
      MACRO(to_mac2,
        TAP(&to MAC),
        TAP(&bt BT_SEL 2)
      )
    };
};
/ {
    combos {
        compatible = "zmk,combos";
        COMBO(tilde, 0 1, &kp TILDE, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(grave, 8 9, &kp GRAVE, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT) 
        COMBO(equal, 1 2, &eq_eeq, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(plus_equal, 1 2 3, &peq, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(minus_equal, 6 7 8, &meq, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(plus_d, 2 3, &plus_d, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(minus_d, 6 7, &minus_d, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, FAST_COMBO_TIMEOUT)
        COMBO(under, 7 8, &kp UNDER, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, FAST_COMBO_TIMEOUT)        
        COMBO(home_snl, 10 20, &home_snl, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(end_snr, 19 29, &end_snr, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)     
        COMBO(snake_kebab, 0 10, &snake_kebab, MAC WIN, COMBO_TIMEOUT)
        COMBO(camel_path, 9 19, &camel_path, MAC WIN, COMBO_TIMEOUT)
        COMBO(del, 31 32, &kp DEL, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(colon, 33 34, &col_dcol, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)     
        COMBO(quote, 7 17, &kp DQT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(lbrc, 20 21, &kp LBRC, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(rbrc, 28 29, &kp RBRC, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, FAST_COMBO_TIMEOUT)
        COMBO(lbkt, 22 23, &kp LBKT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(rbkt, 26 27, &kp RBKT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(lpar, 21 22, &kp LPAR, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(rpar, 27 28, &kp RPAR, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(dt_right, 23 24, &desktop_right, MAC, COMBO_TIMEOUT)
        COMBO(dt_left, 25 26, &desktop_left, MAC, COMBO_TIMEOUT)
        COMBO(rptr, 16 26, &rptr, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(lte, 17 27, &lte, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(gte, 18 28, &gte_rarr, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(left, 11 21, &kp LEFT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(up, 2 12, &kp UP, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(down, 12 22, &kp DOWN, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(right, 13 23, &kp RIGHT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(b, 25 26, &kp B, LOWER, COMBO_TIMEOUT)
        COMBO(pipe, 3 13, &pipe_or, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(bslh, 8 18, &kp BSLH, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(excl, 1 11, &excl_neq, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(amps, 6 16, &amps_and, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(perc, 4 14, &kp PRCNT, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
        COMBO(hash, 5 15, &kp HASH, MAC WIN SNAKE CAMEL PATH KEBAB LOWER, COMBO_TIMEOUT)
    };
};
/ {
  keymap {
   compatible = "zmk,keymap";
    mac_layer {
      label = "MAC";
      // -----------------------------------------------------------------
      // |  Q  ~  W  =  F  +  P  |  B  |   |  J  |  L  -  U  _  Y  `  '  |
      // |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  \  O  |
      // |  Z  {  X  (  C  [  D  |  V  |   |  K  |  H  ]  ,  )  .  }  /  |
      //   | ESC | LWR(TAB) | LSFT(BKSP) |  SPC  |  RSE(;)  | RET |
      bindings = <
        &kp Q       &kp W      &kp F      &kp P       &kp B  &kp J &kp L       &kp U      &kp Y      &kp SQT     
        &hm LSHFT A &hm LALT R &hm LGUI S &hm LCTRL T &kp G  &kp M &hm RCTRL N &hm RGUI E &hm RALT I &hm RSHFT O 
        &kp Z       &kp X      &kp C      &kp D       &kp V  &kp K &kp H       &kp COMMA  &kp DOT    &kp FSLH    
        &kp ESC &lt LOWER TAB &mt LSHFT BKSP &kp SPACE &lt RAISE SEMI &mt RSFT RET
      >;
    };
    
    win_layer {
      label = "WIN";
      // -----------------------------------------------------------------
      // |  Q  ~  W  =  F  +  P  |  B  |   |  J  |  L  -  U  _  Y  `  '  |
      // |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  \  O  |
      // |  Z  {  X  (  C  [  D  |  V  |   |  K  |  H  ]  ,  )  .  }  /  |
      //   | ESC | LWR(TAB) | LSFT(BKSP) |  SPC  |  RSE(;)  | RET |
      bindings = <
        &kp Q       &kp W      &kp F       &kp P      &kp B  &kp J &kp L       &kp U       &kp Y      &kp SQT     
        &hm LSHFT A &hm LALT R &hm LCTRL S &hm LGUI T &kp G  &kp M &hm RGUI N  &hm RCTRL E &hm RALT I &hm RSHFT O 
        &kp Z       &kp X      &kp C       &kp D      &kp V  &kp K &kp H       &kp COMMA   &kp DOT    &kp FSLH    
        &kp ESC &lt LOWER TAB &mt LSHFT BKSP &kp SPACE &lt RAISE SEMI &mt RSFT RET
      >;
    };
    snake_layer {
      label = "SNEK";
      bindings = <
        &kp LS(Q) &kp LS(W) &kp LS(F) &kp LS(P) &kp LS(B)  &kp LS(J) &kp LS(L) &kp LS(U) &kp LS(Y) &kp SQT     
        &kp LS(A) &kp LS(R) &kp LS(S) &kp LS(T) &kp LS(G)  &kp LS(M) &kp LS(N) &kp LS(E) &kp LS(I) &kp LS(O) 
        &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(D) &kp LS(V)  &kp LS(K) &kp LS(H) &kp COMMA  &kp DOT  &kp FSLH    
        &tog SNAKE &lt LOWER TAB &kp BKSP &kp UNDER &lt RAISE SEMI &mt RSFT RET
      >;
    };
    CAPS_LAYER("CAML", &sk LSFT, CAMEL)
    CAPS_LAYER("PATH", &kp FSLH, PATH)
    CAPS_LAYER("KEB-", &kp MINUS, KEBAB)
    lower_layer {
      label = "SYM";
      // -----------------------------------------------------------------
      // |  !  |  @  |  #  |  $  |  %  |   |  %  |  &  |  *  |  "  |  '  |
      // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
      // |  |  |  ~  |  :  |  `  |  \  |   |  x  |  h  |  ,  |  .  |  /  |
      //      |  DEL  |  TRANS  |  LGUI  |  BKSP  | MOSPACE |  RET  |
      bindings = <
        &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp DQT &kp SQT 
        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5     &kp N6    &kp N7    &kp N8    &kp N9   &kp N0   
        &kp PIPE  &kp TILDE &kp COLON &kp GRAVE &kp BSLH   &kp X     &kp H     &kp COMMA &kp DOT  &kp FSLH 
        &kp DEL    &trans   &kp BKSP  &kp SPACE &lt RAISE TAB &kp RET
      >;
    };

    raise_layer {
      label = "NAV";
      // ------------------------------------------------------------------------
      // | INS  | BACK |  UP  |  FWD | PGUP |   | BRI+ |  VOL+ | (  |  )  | DEL |
      // | CAPS | LEFT | DOWN | RGHT | PRSC |   | AUTO |  MUTE | [  |  ]  |  ;  |
      // | HOME | Z IN | LGUI | ZOUT | PGDN |   | BRI- |  VOL- | {  |  }  | END |
      //                              |   |   | SHIFT |  |   |
      bindings = <
        &kp INS  &kp C_AC_BACK  &kp UP     &kp C_AC_FORWARD  &kp PG_UP &kp C_BRI_UP   &kp C_VOL_UP &kp LPAR &kp RPAR  &kp DEL  
        &kp CAPS &kp LEFT       &kp DOWN   &kp RIGHT         &kp PSCRN &kp C_BRI_AUTO &kp C_MUTE   &kp LBKT &kp RBKT  &kp SEMI 
        &kp HOME &kp C_AC_ZOOM_IN &kp LGUI &kp C_AC_ZOOM_OUT &kp PG_DN &kp C_BRI_DN   &kp C_VOL_DN &kp LBRC &kp RBRC  &kp END  
        &trans    &trans  &kp LSHFT &trans &trans      &trans
      >;
    };

    funct_layer {
      label = "FUNC";
      // ------------------------------------------------------------------------
      // | F1 | F2  | F3  | F4  | B |   | BT1 | BLE     | MAC | EP ON |  LGAME  |
      // | F5 | F6  | F7  | F8  | G |   | BT2 | OUT TOG | BTP |  XXX  |   BTN   |
      // | F9 | F10 | F11 | F12 | T |   | BT3 | USB     | WIN | EPOFF | BLE_RST |
      //            | XXX | XXX | XXX | XXX | XXX | XXX |
      bindings = <
        &kp F1 &kp F2  &kp F3  &kp F4  &kp B &to_mac1 &out OUT_BLE &to MAC    &ext_power EP_ON  &tog GAME
        &kp F5 &kp F6  &kp F7  &kp F8  &kp G &to_win  &out OUT_TOG &bt BT_PRV &none             &bt BT_PRV      
        &kp F9 &kp F10 &kp F11 &kp F12 &kp T &to_mac2 &out OUT_USB &to WIN    &ext_power EP_OFF &bt BT_CLR     
        &trans   &trans    &trans  &trans  &trans   &trans
      >;
    };  

    game_layer {
      label = "GAME";
      // ----------------------------------------------------
      // | ESC   | Q | W | E | R |   | T | 1 | 2 | 3 | GAME |
      // | LSHFT | A | S | D | G |   | H | 4 | 5 | 6 |  F3  |
      // | M     | Z | X | C | V |   | B | 7 | 8 | 9 |  F5  |
      //             | 4 | 3 | SPC | SPC | 0 | ENT |
      bindings = <
        &kp ESC   &kp Q &kp W &kp E &kp R &kp T &kp N1 &kp N2 &kp N3 &tog GAME
        &kp LSHFT &kp A &kp S &kp D &kp G &kp H &kp N4 &kp N5 &kp N6 &kp F3 
        &kp M     &kp Z &kp X &kp C &kp V &kp B &kp N7 &kp N8 &kp N9 &kp F5 
        &kp N4          &kp N3      &kp SPACE &kp SPACE  &kp N0       &kp RET
      >;
    };
  };
};